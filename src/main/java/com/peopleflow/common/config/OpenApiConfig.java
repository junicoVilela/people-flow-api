package com.peopleflow.common.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

@Configuration
public class OpenApiConfig {

    @Value("${app.api.version:1.0.0}")
    private String apiVersion;

    @Value("${app.api.title:People Flow API}")
    private String apiTitle;

    @Value("${app.api.description:API para gest√£o de colaboradores e RH}")
    private String apiDescription;

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title(apiTitle)
                        .version(apiVersion)
                        .description(buildDescription())
                        .contact(new Contact()
                                .name("Equipe People Flow")
                                .email("contato@peopleflow.com")
                                .url("https://peopleflow.com"))
                        .license(new License()
                                .name("Apache 2.0")
                                .url("https://www.apache.org/licenses/LICENSE-2.0.html")))
                .servers(List.of(
                        new Server()
                                .url("http://localhost:8080")
                                .description("Ambiente de Desenvolvimento"),
                        new Server()
                                .url("https://api-dev.peopleflow.com")
                                .description("Ambiente de Homologa√ß√£o"),
                        new Server()
                                .url("https://api.peopleflow.com")
                                .description("Ambiente de Produ√ß√£o")))
                .addSecurityItem(new SecurityRequirement().addList("Bearer Authentication"))
                .components(new Components()
                        .addSecuritySchemes("Bearer Authentication",
                                new SecurityScheme()
                                        .type(SecurityScheme.Type.HTTP)
                                        .scheme("bearer")
                                        .bearerFormat("JWT")
                                        .description("Token JWT para autentica√ß√£o. Formato: Bearer {token}")));
    }

    /**
     * Constr√≥i a descri√ß√£o completa da API incluindo informa√ß√µes t√©cnicas
     */
    private String buildDescription() {
        return String.format("""
            %s
            
            ## üèóÔ∏è Arquitetura
            
            Esta API foi desenvolvida seguindo os princ√≠pios de:
            - **Arquitetura Hexagonal** (Ports & Adapters)
            - **Domain-Driven Design** (DDD)
            - **Rich Domain Model** com valida√ß√µes de invariantes
            - **Domain Events** para desacoplamento
            - **CQRS Pattern** para separa√ß√£o de leitura/escrita
            
            ## üìã Funcionalidades
            
            - Gerenciamento completo de colaboradores (CRUD)
            - Opera√ß√µes de neg√≥cio (demitir, ativar, inativar, excluir)
            - Busca avan√ßada com filtros e pagina√ß√£o
            - Valida√ß√µes de regras de neg√≥cio
            - Auditoria autom√°tica de opera√ß√µes
            
            ## üîê Autentica√ß√£o
            
            A API utiliza autentica√ß√£o JWT. Para acessar endpoints protegidos:
            1. Obtenha um token JWT no servidor de autentica√ß√£o
            2. Clique no bot√£o "Authorize" (üîí) acima
            3. Insira o token no formato: `Bearer seu-token-jwt`
            
            ## üìä C√≥digos de Status
            
            - `200 OK` - Requisi√ß√£o bem-sucedida
            - `201 Created` - Recurso criado com sucesso
            - `204 No Content` - Requisi√ß√£o bem-sucedida sem retorno
            - `400 Bad Request` - Erro de valida√ß√£o nos dados
            - `401 Unauthorized` - Autentica√ß√£o necess√°ria
            - `403 Forbidden` - Sem permiss√£o para acessar
            - `404 Not Found` - Recurso n√£o encontrado
            - `409 Conflict` - Conflito (ex: CPF duplicado)
            - `500 Internal Server Error` - Erro interno do servidor
            """, apiDescription);
    }
}

